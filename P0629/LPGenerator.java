/* LPGenerator.java */
/* Generated By:JavaCC: Do not edit this line. LPGenerator.java */
import java.util.*;
import java.io.*;

public class LPGenerator implements LPGeneratorConstants {
    public static Obj getProgram(String filename)throws ParseException{
        Reader reader=null;
        Obj p=null;
        try{
            reader=new FileReader(filename);
            p=new LPGenerator(reader).programf();
        }catch(FileNotFoundException e){
            System.out.println(filename+" is not found");
        }
        return p;
    }
    public static Obj getProgramFromString(String s)throws ParseException{
        Reader reader=new StringReader(s);
        Obj p=null;
        reader=new StringReader(s);
        p=new LPGenerator(reader).programf();
        return p;
    }

  final public Obj programf() throws ParseException {Obj obj;
    List<Obj> list=new ArrayList<Obj>();
    Token t,t2;
    List<String> libs=new ArrayList<String>();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPORT:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(IMPORT);
      t2 = jj_consume_token(IDENTIFIER);
libs.add(t2.image);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LIBRARY:{
      t = jj_consume_token(LIBRARY);
      break;
      }
    case MINIMIZE:{
      t = jj_consume_token(MINIMIZE);
      break;
      }
    case MAXIMIZE:{
      t = jj_consume_token(MAXIMIZE);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case WHILE:
      case FORALL:
      case EXISTS:
      case FOR:
      case FUN:
      case VARIABLE:
      case DEF:
      case SUBJECT:
      case VAR:
      case INTEGER:
      case DOUBLE:
      case IDENTIFIER:
      case 23:
      case 24:
      case 27:
      case 45:
      case 46:
      case 51:
      case 52:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      obj = stmtf();
list.add(obj);
    }
    jj_consume_token(0);
{if ("" != null) return new Program(libs,t.image,list);}
    throw new Error("Missing return statement in function");
  }

  final public Obj stmtf() throws ParseException {Obj cond,init,step,stmt,stmt2=null,params,expr,expr2,expr3;
    List<Obj> stmts;
    Token t,t2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 23:{
      jj_consume_token(23);
{if ("" != null) return new IntObj(1);}
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      if (jj_2_1(2147483647)) {
        jj_consume_token(IF);
        jj_consume_token(24);
        cond = exprf();
        jj_consume_token(25);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 26:{
          jj_consume_token(26);
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          ;
        }
        stmt = stmtf();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ELSE:{
          jj_consume_token(ELSE);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 26:{
            jj_consume_token(26);
            break;
            }
          default:
            jj_la1[4] = jj_gen;
            ;
          }
          stmt2 = stmtf();
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          ;
        }
if(stmt2==null){if ("" != null) return new IfStmt(cond,stmt);}
        {if ("" != null) return new IfStmt(cond,stmt,stmt2);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IF:{
          jj_consume_token(IF);
          cond = exprf();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 26:{
            jj_consume_token(26);
            stmt = stmtf();
            break;
            }
          case 27:{
            stmt = blockstmtf();
            break;
            }
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ELSE:{
            jj_consume_token(ELSE);
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case 26:{
              jj_consume_token(26);
              break;
              }
            default:
              jj_la1[7] = jj_gen;
              ;
            }
            stmt2 = stmtf();
            break;
            }
          default:
            jj_la1[8] = jj_gen;
            ;
          }
if(stmt2==null){if ("" != null) return new IfStmt(cond,stmt);}
        {if ("" != null) return new IfStmt(cond,stmt,stmt2);}
          break;
          }
        case WHILE:{
          jj_consume_token(WHILE);
          jj_consume_token(24);
          cond = exprf();
          jj_consume_token(25);
          stmt = stmtf();
{if ("" != null) return new WhileStmt(cond,stmt);}
          break;
          }
        case FOR:{
          jj_consume_token(FOR);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 24:{
            jj_consume_token(24);
            init = exprf();
            jj_consume_token(23);
            cond = exprf();
            jj_consume_token(23);
            step = exprf();
            jj_consume_token(25);
            stmt = stmtf();
{if ("" != null) return new ForStmt(init,cond,step,stmt);}
            break;
            }
          case IDENTIFIER:{
            t = jj_consume_token(IDENTIFIER);
            jj_consume_token(IN);
            expr = exprf();
            stmt = nestedforeachstmtf();
{if ("" != null) return new ForEachStmt(new Identifier(t.image),expr,stmt);}
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        case DEF:{
          jj_consume_token(DEF);
          t = jj_consume_token(IDENTIFIER);
          jj_consume_token(24);
          params = paramsf();
          jj_consume_token(25);
          stmt = stmtf();
{if ("" != null) return new FuncDefStmt(t.image,params,stmt);}
          break;
          }
        case SUBJECT:{
          jj_consume_token(SUBJECT);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 27:{
            jj_consume_token(27);
            expr = subjsf();
            jj_consume_token(28);
            break;
            }
          case FORALL:
          case EXISTS:
          case FUN:
          case VAR:
          case INTEGER:
          case DOUBLE:
          case IDENTIFIER:
          case 23:
          case 24:
          case 29:
          case 45:
          case 46:
          case 51:
          case 52:{
            expr = argsf();
            jj_consume_token(23);
            break;
            }
          default:
            jj_la1[10] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
{if ("" != null) return new FuncCall(new Identifier("subject"),expr);}
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          if (jj_2_2(2147483647)) {
            stmt = blockstmtf();
{if ("" != null) return stmt;}
          } else if (jj_2_3(2147483647)) {
            t = jj_consume_token(VARIABLE);
            jj_consume_token(27);
stmts=new ArrayList<Obj>();
            label_3:
            while (true) {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case IDENTIFIER:{
                ;
                break;
                }
              default:
                jj_la1[11] = jj_gen;
                break label_3;
              }
              t2 = jj_consume_token(IDENTIFIER);
              jj_consume_token(23);
stmts.add(new LPDefStmt(t.image,t2.image));
            }
            jj_consume_token(28);
{if ("" != null) return new BlockStmt(stmts);}
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case VARIABLE:{
              t = jj_consume_token(VARIABLE);
              t2 = jj_consume_token(IDENTIFIER);
              jj_consume_token(23);
{if ("" != null) return new LPDefStmt(t.image,t2.image);}
              break;
              }
            case FORALL:
            case EXISTS:
            case FUN:
            case VAR:
            case INTEGER:
            case DOUBLE:
            case IDENTIFIER:
            case 24:
            case 45:
            case 46:
            case 51:
            case 52:{
              stmt = exprf();
              jj_consume_token(23);
{if ("" != null) return stmt;}
              break;
              }
            default:
              jj_la1[14] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Obj subjsf() throws ParseException {List<Obj> subjs=new ArrayList<Obj>();
    Obj expr;
    label_4:
    while (true) {
      expr = exprf();
subjs.add(expr);
      jj_consume_token(23);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FORALL:
      case EXISTS:
      case FUN:
      case VAR:
      case INTEGER:
      case DOUBLE:
      case IDENTIFIER:
      case 24:
      case 45:
      case 46:
      case 51:
      case 52:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_4;
      }
    }
{if ("" != null) return new Args(subjs);}
    throw new Error("Missing return statement in function");
  }

  final public Obj blockstmtf() throws ParseException {List<Obj> stmts;
    Obj stmt;
    jj_consume_token(27);
stmts=new ArrayList<Obj>();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IF:
      case WHILE:
      case FORALL:
      case EXISTS:
      case FOR:
      case FUN:
      case VARIABLE:
      case DEF:
      case SUBJECT:
      case VAR:
      case INTEGER:
      case DOUBLE:
      case IDENTIFIER:
      case 23:
      case 24:
      case 27:
      case 45:
      case 46:
      case 51:
      case 52:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
      stmt = stmtf();
stmts.add(stmt);
    }
    jj_consume_token(28);
{if ("" != null) return new BlockStmt(stmts);}
    throw new Error("Missing return statement in function");
  }

  final public Obj nestedforeachstmtf() throws ParseException {Obj list,stmt;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 29:{
      jj_consume_token(29);
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(IN);
      list = exprf();
      stmt = nestedforeachstmtf();
{if ("" != null) return new ForEachStmt(new Identifier(t.image),list,stmt);}
      break;
      }
    case 26:{
      jj_consume_token(26);
      stmt = stmtf();
{if ("" != null) return stmt;}
      break;
      }
    case 27:{
      stmt = blockstmtf();
{if ("" != null) return stmt;}
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Obj paramsf() throws ParseException {List<Obj> params=new ArrayList<Obj>();
    Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER:{
      t = jj_consume_token(IDENTIFIER);
params.add(new Identifier(t.image));
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 29:{
        ;
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        break label_6;
      }
      jj_consume_token(29);
      t = jj_consume_token(IDENTIFIER);
params.add(new Identifier(t.image));
    }
{if ("" != null) return new Params(params);}
    throw new Error("Missing return statement in function");
  }

  final public Obj exprf() throws ParseException {Obj expr;
    expr = expr9f();
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Obj expr9f() throws ParseException {Token index;
    Obj list,expr,option=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FORALL:{
      jj_consume_token(FORALL);
      index = jj_consume_token(IDENTIFIER);
      jj_consume_token(IN);
      list = exprf();
      expr = nestedforallf();
{if ("" != null) return new ForAll(new Identifier(index.image),list,expr);}
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      if (jj_2_4(2)) {
        jj_consume_token(EXISTS);
        jj_consume_token(24);
        option = exprf();
        jj_consume_token(25);
        index = jj_consume_token(IDENTIFIER);
        jj_consume_token(IN);
        list = exprf();
        expr = nestedexists2f();
{if ("" != null) return new Exists(new Identifier(index.image),list,expr,option);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EXISTS:{
          jj_consume_token(EXISTS);
          index = jj_consume_token(IDENTIFIER);
          jj_consume_token(IN);
          list = exprf();
          expr = nestedexistsf();
{if ("" != null) return new Exists(new Identifier(index.image),list,expr);}
          break;
          }
        case FUN:
        case VAR:
        case INTEGER:
        case DOUBLE:
        case IDENTIFIER:
        case 24:
        case 45:
        case 46:
        case 51:
        case 52:{
          expr = expr8f();
{if ("" != null) return expr;}
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Obj expr8f() throws ParseException {Obj left,right;
    left = expr7_5f();
    if (jj_2_5(2)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 30:{
        jj_consume_token(30);
        right = exprf();
left=new BinOp("=",left,right);
        break;
        }
      case 31:{
        jj_consume_token(31);
        right = exprf();
left=new BinOp("=",left,new BinOp("+",left,right));
        break;
        }
      case 32:{
        jj_consume_token(32);
        right = exprf();
left=new BinOp("=",left,new BinOp("-",left,right));
        break;
        }
      case 33:{
        jj_consume_token(33);
        right = exprf();
left=new BinOp("=",left,new BinOp("*",left,right));
        break;
        }
      case 34:{
        jj_consume_token(34);
        right = exprf();
left=new BinOp("=",left,new BinOp("/",left,right));
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Obj expr7_5f() throws ParseException {Obj expr,then=null,elze;
    expr = expr7f();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 35:{
      jj_consume_token(35);
      then = exprf();
      jj_consume_token(26);
      elze = expr7_5f();
expr=new Cond(expr,then,elze);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Obj expr7f() throws ParseException {Obj left,right;
    left = expr6f();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 36:{
      jj_consume_token(36);
      right = exprf();
left=new BinOp("->",left,right);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Obj expr6f() throws ParseException {Obj left,right;
    left = expr5f();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 37:{
        ;
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        break label_7;
      }
      jj_consume_token(37);
      right = expr5f();
left=new BinOp("||",left,right);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Obj expr5f() throws ParseException {Obj left,right;
    left = expr4f();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 38:{
        ;
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        break label_8;
      }
      jj_consume_token(38);
      right = expr4f();
left=new BinOp("&&",left,right);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Obj expr4f() throws ParseException {Obj left,right;
    Token op;
    left = expr3f();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 39:{
        op = jj_consume_token(39);
        break;
        }
      case 40:{
        op = jj_consume_token(40);
        break;
        }
      case 41:{
        op = jj_consume_token(41);
        break;
        }
      case 42:{
        op = jj_consume_token(42);
        break;
        }
      case 43:{
        op = jj_consume_token(43);
        break;
        }
      case 44:{
        op = jj_consume_token(44);
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = expr3f();
left=new BinOp(op.image,left,right);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Obj expr3f() throws ParseException {Obj left,right;
    Token op;
    left = expr2f();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 45:
      case 46:{
        ;
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 45:{
        op = jj_consume_token(45);
        break;
        }
      case 46:{
        op = jj_consume_token(46);
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = expr2f();
left=new BinOp(op.image,left,right);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Obj expr2f() throws ParseException {Obj left,right;
    Token op;
    left = unaryf();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 47:
      case 48:
      case 49:
      case 50:{
        ;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 47:{
        op = jj_consume_token(47);
        break;
        }
      case 48:{
        op = jj_consume_token(48);
        break;
        }
      case 49:{
        op = jj_consume_token(49);
        break;
        }
      case 50:{
        op = jj_consume_token(50);
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = unaryf();
left=new BinOp(op.image,left,right);
    }
{if ("" != null) return left;}
    throw new Error("Missing return statement in function");
  }

  final public Obj unaryf() throws ParseException {Obj expr,list;
    Token op,index;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 45:
    case 46:
    case 51:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 46:{
        op = jj_consume_token(46);
        break;
        }
      case 45:{
        op = jj_consume_token(45);
        break;
        }
      case 51:{
        op = jj_consume_token(51);
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      expr = unaryf();
{if ("" != null) return new Unary(op.image,expr);}
      break;
      }
    case FUN:
    case VAR:
    case INTEGER:
    case DOUBLE:
    case IDENTIFIER:
    case 24:
    case 52:{
      expr = postfixf();
{if ("" != null) return expr;}
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Obj nestedforallf() throws ParseException {Token index;
    Obj list,expr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 29:{
      jj_consume_token(29);
      index = jj_consume_token(IDENTIFIER);
      jj_consume_token(IN);
      list = exprf();
      expr = nestedforallf();
{if ("" != null) return new ForAll(new Identifier(index.image),list,expr);}
      break;
      }
    case 26:{
      jj_consume_token(26);
      expr = exprf();
{if ("" != null) return expr;}
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Obj nestedexistsf() throws ParseException {Token index;
    Obj list,expr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 29:{
      jj_consume_token(29);
      index = jj_consume_token(IDENTIFIER);
      jj_consume_token(IN);
      list = exprf();
      expr = nestedexistsf();
{if ("" != null) return new Exists(new Identifier(index.image),list,expr);}
      break;
      }
    case 26:{
      jj_consume_token(26);
      expr = exprf();
{if ("" != null) return expr;}
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Obj nestedexists2f() throws ParseException {Token index;
    Obj list,expr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case 29:{
      jj_consume_token(29);
      index = jj_consume_token(IDENTIFIER);
      jj_consume_token(IN);
      list = exprf();
      expr = nestedexistsf();
{if ("" != null) return new Exists(new Identifier(index.image),list,expr,true);}
      break;
      }
    case 26:{
      jj_consume_token(26);
      expr = exprf();
{if ("" != null) return expr;}
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Obj postfixf() throws ParseException {Obj expr,args,index;
    expr = primaryf();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 24:
      case 52:{
        ;
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 24:{
        jj_consume_token(24);
        args = argsf();
        jj_consume_token(25);
expr=new FuncCall(expr,args);
        break;
        }
      case 52:{
        jj_consume_token(52);
        index = exprf();
        jj_consume_token(53);
expr=new ListRef(expr,index);
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
  }

  final public Obj argsf() throws ParseException {ArrayList<Obj> args=new ArrayList<Obj>();
    Obj expr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FORALL:
    case EXISTS:
    case FUN:
    case VAR:
    case INTEGER:
    case DOUBLE:
    case IDENTIFIER:
    case 24:
    case 45:
    case 46:
    case 51:
    case 52:{
      expr = exprf();
args.add(expr);
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      ;
    }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 29:{
        ;
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        break label_12;
      }
      jj_consume_token(29);
      expr = exprf();
args.add(expr);
    }
{if ("" != null) return new Args(args);}
    throw new Error("Missing return statement in function");
  }

  final public Obj primaryf() throws ParseException {Token t;
    Obj expr,params,block;
    List<Obj> elements;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:{
      t = jj_consume_token(INTEGER);
{if ("" != null) return new IntObj(Integer.parseInt(t.image));}
      break;
      }
    case DOUBLE:{
      t = jj_consume_token(DOUBLE);
{if ("" != null) return new DoubleObj(Double.parseDouble(t.image));}
      break;
      }
    case VAR:{
      jj_consume_token(VAR);
      t = jj_consume_token(IDENTIFIER);
{if ("" != null) return new Identifier(t.image,true);}
      break;
      }
    case IDENTIFIER:{
      t = jj_consume_token(IDENTIFIER);
{if ("" != null) return new Identifier(t.image);}
      break;
      }
    case 24:{
      jj_consume_token(24);
      expr = exprf();
      jj_consume_token(25);
{if ("" != null) return expr;}
      break;
      }
    case FUN:{
      jj_consume_token(FUN);
      jj_consume_token(24);
      params = paramsf();
      jj_consume_token(25);
      block = stmtf();
{if ("" != null) return new Lambda(params,block);}
      break;
      }
    case 52:{
      jj_consume_token(52);
elements=new ArrayList<Obj>();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FORALL:
      case EXISTS:
      case FUN:
      case VAR:
      case INTEGER:
      case DOUBLE:
      case IDENTIFIER:
      case 24:
      case 45:
      case 46:
      case 51:
      case 52:{
        expr = exprf();
elements.add(expr);
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case 29:{
            ;
            break;
            }
          default:
            jj_la1[42] = jj_gen;
            break label_13;
          }
          jj_consume_token(29);
          expr = exprf();
elements.add(expr);
        }
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        ;
      }
      jj_consume_token(53);
{if ("" != null) return new ObjList(elements);}
      break;
      }
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3_3()
 {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(27)) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(27)) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_scan_token(52)) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(FUN)) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_scan_token(EXISTS)) return true;
    if (jj_scan_token(24)) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(24)) return true;
    return false;
  }

  private boolean jj_3R_20()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_scan_token(VAR)) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    if (jj_scan_token(30)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_32()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_scan_token(34)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_17()
 {
    if (jj_scan_token(33)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(24)) return true;
    return false;
  }

  private boolean jj_3R_16()
 {
    if (jj_scan_token(32)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_scan_token(31)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_3R_25()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public LPGeneratorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[45];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000,0x3800,0x9f746e8,0x4000000,0x4000000,0x10,0xc000000,0x4000000,0x10,0x1400000,0x29f404c0,0x400000,0x800000,0x30228,0x17444c0,0x17404c0,0x9f746e8,0x2c000000,0x400000,0x20000000,0x40,0x1740480,0xc0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1740400,0x24000000,0x24000000,0x24000000,0x1000000,0x1000000,0x17404c0,0x20000000,0x20000000,0x17404c0,0x1740400,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x186000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x186000,0x0,0x0,0x0,0x186000,0x186000,0x186000,0x0,0x0,0x0,0x0,0x186000,0x7,0x8,0x10,0x20,0x40,0x1f80,0x1f80,0x6000,0x6000,0x78000,0x78000,0x86000,0x186000,0x0,0x0,0x0,0x100000,0x100000,0x186000,0x0,0x0,0x186000,0x100000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public LPGenerator(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LPGenerator(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LPGeneratorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public LPGenerator(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LPGeneratorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public LPGenerator(LPGeneratorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LPGeneratorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 45; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[54];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 45; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 54; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
